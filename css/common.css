@charset "utf-8";/* 白紙のCSSにはまず文字コードを１行目に書く。 */

*,
::before,
::after {

  /* すべての要素を表す「*」（全称セレクタ）と、擬似要素である「::before」、「::after」に対してスタイルを指定する。*/

  /* 余白を解除する */
  padding: 0;
  margin: 0;

  /* 「box-sizing」というプロパティで要素の幅と高さの計算方法を「width／heightで指定した値のみ」に指定する。 */
  box-sizing: border-box; /* デフォルトでは「content-box」になっており、これでは「width／heightの値」＋「paddingの値」＋「border（他の要素との境界）の太さ」を足したサイズが算出される。
  * 
  しかし、レスポンシブデザインでは幅や高さを「％」（親要素の文字サイズを基準としてサイズを指定）のような可変の単位で指定すると、要素全体のサイズの計算が複雑になる。
  そのため、要素の大きさを「width／heightで指定した値のみ」（border-box）に変更する。paddingやborderの太さをサイズの計算に含めないようにすることで、シンプルに計算することができる。 */
}

/* リストの行頭アイコンを非表示にする。 */
/* ただし、Chrome バージョン129.0.6668.100（Official Build）（arm64）では、「ul要素」の行頭に付く「・」アイコンがデフォルトで非表示になっている。書籍の刊行後にChromeがアップデートされたのかもしれない。いちおう、まだこのスタイルを追加する段階では、HTMLに「ol要素」はないため、念のため追加しておく。 */
ul,
ol {
  list-style: none;
}

/* リンクの文字列にデフォルトで付いている青い下線と青い文字色をリセットする。 */
a {
  color: inherit;   /* 「inherit」は、親要素のスタイルを継承することを意味する。 */
  text-decoration: none;  /* 下線の装飾を解除する。 */
}

/* ページ全体のスタイル */
body {
  font-family: sans-serif;      /* ページ全体のフォントにサンセリフ体を指定。*/
  font-size: 16px;              /* フォントの文字サイズを指定。 */
  color: #000000;             /* テキストの色を黒に指定。 */
  line-height: 1;               /* 行間を指定。 */
  background-color: #ffffff;  /* 背景色を白に指定。 */
}

/* img要素のスタイル */
img {
  max-width: 100%;              /* 最大幅を親要素の範囲内に収まるように設定。 */
}

/* ヘッダーのスタイル */

/* クラス属性がheader-innerの要素に対して、同じdiv要素の中でも個別のスタイルを設定する。これを行うには「クラスセレクタ」を使う。「.クラス名」の形で記述する。 */

.header-inner {

  /* 要素のサイズを指定。 */

  max-width: 1200px;            /* レスポンシブデザインで幅をmax-widthで指定するとブラウザの幅に合わせて可変になる */
  /* ただし、親要素のheader要素の幅を指定しないと、header要素のサイズがheader-innerクラスのdiv要素より幅が広い場合、それぞれの要素でたとえば背景色が異なる場合は、ブラウザの横幅の途中までしかheader-innerクラスのdiv要素の背景色が反映されない。 */

  height: 110px;              /* 要素のサイズをheightで指定。 */

  /* 要素を中央揃えで表示する。 */
  margin-left: auto;
  margin-right: auto;

  /* 余白の設定 */
  /*ブラウザの横幅を縮めると、ブラウザの左右の辺から要素にかけての余白がなく、窮屈に見えるので余白を指定する。 */
  padding-left: 40px;
  padding-left: 40px;

  /* ヘッダーの右側にメニューを表示（要素を横並びにする） */
  display: flex;

  /* ヘッダーの要素を均等に配置し、最初の要素を先頭（左端）に、最後の要素を末尾（右端）に寄せる。（justify-contentプロパティの値をspace-between に指定）*/
  justify-content: space-between;
  /* 横並びの配置の長際はjustify-contentでおこなう */


  /* 横並びとクロスする方向（ここでは縦方向）の配置を制御する（align-itemsプロパティ） */
  align-items: center;      /* ロゴとメニューを天地中央で揃える */
}

/* モバイル表示の場合に表示させるハンバーガーメニューをいったん非表示。 */
.toggle-menu-button {
  display: none;
}

/* ヘッダーのロゴのスタイル。 */
.header-logo {
  display: block;     /* ロゴ画像は、a要素（インライン要素）でマークアップされているため、幅の指定ができない。
  displayプロパティに「block」を指定して、幅の指定ができるようにする。 */

  width: 170px;
}

/* ナビゲーションエリアのスタイル。 */
.site-menu ul{
  display: flex;      /* ナビゲーションメニューを作っているul要素を横並びにする */
}

/* ナビゲーションメニューのスタイル */
.site-menu ul li {
  margin-left: 20px;   /* ナビゲーションメニューの要素間に余白を設定 */
  margin-right: 20px;

  /* Google fontでインストールしたフォントの設定 */
  font-family: "Montserrat", sans-serif;
  font-optical-sizing: auto;
  font-weight: bold;

}

/* フッターのスタイル。 */
.footer {
  color: #ffffff;               /* テキストの色を白にする */
  background-color: #24211b;    /* 背景色を指定 */

  padding-top: 30px;              /* footer要素の内側の余白を設定 */
  padding-bottom: 15px;

  display: flex;                  /* footer要素（footerクラス）を構成する要素をいったん横並びにする */
  flex-direction: column;         /* displayプロパティにflexを指定した要素内の配置を縦並びにする */



  /* footer要素（footerクラス）全体の配置を指定する。 */

  align-items: center; /* align-itemsプロパティでflex-direction（flexの方向）とクロス（直交）する向きの配置を指定する。
   ここでは、flex-directionをcolumn（縦）に指定しているので、横方向の配置を真ん中（center）に指定する。 */
}

/* フッターロゴのスタイル */
.footer-logo {
  display: block;     /* ロゴ画像は、a要素（インライン要素）でマークアップされているため、幅の指定ができない。
  displayプロパティに「block」を指定して、幅の指定ができるようにする。 */

  width: 235px;
  margin-top: 90px;   /* footer要素の外側（上）の余白を設定 */

}

/* 電話番号のスタイル。 */
.footer-tel {
  font-size: 26px;
  font-weight: bold;
  margin-top: 28px;
}

/* 営業時間のスタイル。 */
.footer-time {
  font-size: 13px;
  margin-top: 16px;
}

/* コピーライトのスタイル。 */
.copyright {
  font-size: 14px;
  font-weight: bold;
  margin-top: 90px;
}

/* ブレイクポイント（ブラウザ幅に応じたレスポンシブデザインで、レイアウトをPC用とモバイル用のどちらで
表示するか、という閾値）を設定する。 */
@media (max-width: 800px) {
  /* ここに書いたスタイルはブラウザの表示幅が 800px 以下の場合のみ適用される。 */

  .site-menu ul {

    display: block;           /* PC用レイアウトでは、displayプロパティの値を「flex」に指定していたが、モバイル用レイアウトでは、縦並び（初期値である「block」にする。 */

    text-align: center;       /* ナビゲーションメニューの文字を中央揃えにする。 */

    margin-top: 20px;
  }

  .header {

    position: fixed;          /* ヘッダーをサイトのページ上部に固定する。 */

    /* ブラウザの枠を基準に、固定する場所の位置を指定する。 */
    top: 0;
    left :0;
    right: 0;

    background-color: #ffffff;
    height: 50px;

    z-index: 10;              /* ヘッダーを常に最前面に表示。z-indexプロパティは、要素の重ね順を指定する。数値が大きいほど手前になる。
    ただし、背景色（白）のレイヤが手前に来るわけではなさそう・ */

    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);   /* ヘッダー領域に薄い影をつける */
  }


  .header-inner {

    /* 余白の設定 */
    /*ブラウザの横幅が縮まる（モバイル用レイアウトのため）ので、併せて余白のサイズを縮小。（PC用レイアウトでは40px。 */

    padding-left: 20px;
    padding-left: 20px;

    height: 100%;             /* ヘッダーコンテンツの高さが、親要素に収まるようにする */
    position: relative;       /* ナビゲーションメニューの親要素である「header-inner」クラスの要素に、親要素を基準として子要素である「header-site-menu」クラスの位置を指定するように設定する。 */
  }

  .header-logo {
    width: 100px
  }

  .header-site-menu {
    
    position: absolute;       /* 親要素に対しての位置を指定するために「absolute」をpositionプロパティに指定する */

    /* 「header-site-menu」クラスの要素を親要素から飛び出すように表示するために、位置を指定する。 */
    top: 100%;
    left: 0;
    right: 0;

    /* 文字色と背景色を指定。（背景を黒めの色に設定することで、PC用のレイアウトに表示されていたフッターのメニューが消える。） */
    color: #ffffff;
    background-color: #736E62;

    /* 上下の余白を設定。 */
    padding-top: 30px;
    padding-bottom: 50px;

    /* header-site-menuを非表示にする。 */
    display: none;
  }

  .header-site-menu.is-show {
    /* ハンバーガーメニューのボタンをクリックするたびに、ナビゲーションメニューの表示・非表示を切り替える。 */
    display: block;
  }

  .toggle-menu-button {

    display: block;       /* flex（横並び）を初期値のblockにしているだけだが、これだけで四角い小さなボックスがハンバーガーメニューの場所に表示される。 */

    /* ハンバーガーメニューのサイズを指定する。 */
    width: 44px;
    height: 34px;

    /* ハンバーガーメニューの背景画像のパスを指定する。 */
    background-image: url(../images/common/icon-menu.png);

    background-size: 50%;             /* 背景画像のサイズを指定する。 */
    background-position: center;      /* 背景画像の位置を中央にする。 */
    background-repeat: no-repeat;     /* 背景画像の繰り返しを解除。 */

    background-color: transparent;    /* 背景画像を投下させる。 */
    border: none;                     /* 要素の枠を消す。 */
    border-radius: 0;                 /* 角丸を解除。 */
    outline: none;                    /* タップしたときに表示される枠を消す。 */
  }
}